/* Generated By:JavaCC: Do not edit this line. RichMacroDefinition.java */
package org.richfaces.javacc;

import java.util.*;
import java.io.*;

public class RichMacroDefinition implements RichMacroDefinitionConstants {

        private static String unescape(String arg) {
                StringBuffer result = new StringBuffer(arg);
                int idx = 0;
                while ((idx = result.indexOf("\\", idx)) != -1) {
                        char ch = result.charAt(idx + 1);
                        result.replace(idx, idx + 2, String.valueOf(ch));

                        idx ++;
                }

                return result.toString();
        }

        public static void main(String args[]) throws ParseException, IOException {
                System.out.println("Reading from standard input...");
                String line = new BufferedReader(new InputStreamReader(System.in)).readLine();
                RichMacroDefinition parser = new RichMacroDefinition(new StringReader(line));
                Object def = parser.expression();
                System.out.println(def);
        }

  final public List expression() throws ParseException {
        String m = null;
        String t = null;
        List elems = new ArrayList();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
      case LITERAL:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LITERAL:
        t = text();
                        elems.add(t);
                        t = null;
        break;
      case LEFT_BRACKET:
        m = macrodef();
                        elems.add(new org.richfaces.renderkit.Expression(m));
                        m = null;
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return elems;}
    throw new Error("Missing return statement in function");
  }

  final public String text() throws ParseException {
        String result = null;
        StringBuffer sb = null;
        Token t = null;
    label_2:
    while (true) {
      t = jj_consume_token(LITERAL);
                        if (result == null) {
                                result = unescape(t.image);
                        } else {
                                if (sb == null) {
                                        sb = new StringBuffer(result);
                                }

                                sb.append(unescape(t.image));
                        }

                        t = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LITERAL:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
                {if (true) return (sb != null ? sb.toString() : result);}
    throw new Error("Missing return statement in function");
  }

  final public String macrodef() throws ParseException {
        StringBuffer result = new StringBuffer();
        String m = null;
        String t = null;
    jj_consume_token(LEFT_BRACKET);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LITERAL:
        t = text();
                        result.append(t); t = null;
        break;
      case LEFT_BRACKET:
        m = macrodef();
                        result.append("{" + m + "}"); m = null;
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
      case LITERAL:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(RIGHT_BRACKET);
                {if (true) return result.toString();}
    throw new Error("Missing return statement in function");
  }

  public RichMacroDefinitionTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x14,0x14,0x10,0x14,0x14,};
   }

  public RichMacroDefinition(java.io.InputStream stream) {
     this(stream, null);
  }
  public RichMacroDefinition(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RichMacroDefinitionTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public RichMacroDefinition(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RichMacroDefinitionTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public RichMacroDefinition(RichMacroDefinitionTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public void ReInit(RichMacroDefinitionTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[5];
    for (int i = 0; i < 5; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 5; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
